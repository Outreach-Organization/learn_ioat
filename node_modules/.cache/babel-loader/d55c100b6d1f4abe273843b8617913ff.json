{"ast":null,"code":"var _jsxFileName = \"/home/sdn/Downloads/PlantQ/src/Plant.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Plant.css';\nimport dryImage from './dry.png';\nimport moistImage from './moist.png';\nimport wetImage from './wet.png';\nimport mqtt from 'mqtt';\nconst client = mqtt.connect('mqtt://localhost:8084');\n\nconst Plant = () => {\n  const [moistureLevel, setMoistureLevel] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [plantGoals, setPlantGoals] = useState([{\n    id: 1,\n    minMoisture: 30,\n    maxMoisture: 70,\n    achieved: false\n  }, {\n    id: 2,\n    minMoisture: 40,\n    maxMoisture: 60,\n    achieved: false\n  }, {\n    id: 3,\n    minMoisture: 50,\n    maxMoisture: 70,\n    achieved: false\n  }]);\n  const [isWatering, setIsWatering] = useState(false);\n  useEffect(() => {\n    client.on('connect', () => {\n      client.subscribe('plant/moistureLevel');\n    });\n    client.on('message', (topic, message) => {\n      if (topic === 'plant/moistureLevel') {\n        setMoistureLevel(parseInt(message.toString()));\n      }\n    });\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  const getPlantImage = () => {\n    if (moistureLevel <= 30) {\n      return dryImage;\n    } else if (moistureLevel <= 70) {\n      return moistImage;\n    } else {\n      return wetImage;\n    }\n  };\n\n  const toggleWatering = () => {\n    if (!isWatering) {\n      // Start watering\n      if (moistureLevel < 70) {\n        // Correct action - Increment points\n        setPoints(prevPoints => prevPoints + 20);\n      } else {\n        // Wrong action - Reduce points\n        setPoints(prevPoints => Math.max(prevPoints - 20, 0));\n      }\n\n      setIsWatering(true); // Send command to start watering\n\n      client.publish('plant/command', 'start');\n    } else {\n      // Stop watering\n      setIsWatering(false); // Send command to stop watering\n\n      client.publish('plant/command', 'stop');\n    }\n  };\n\n  useEffect(() => {\n    // Check level up condition whenever moisture level changes\n    if (level <= plantGoals.length && moistureLevel >= plantGoals[level - 1].minMoisture && moistureLevel <= plantGoals[level - 1].maxMoisture && !plantGoals[level - 1].achieved) {\n      setLevel(prevLevel => prevLevel + 1);\n      setPoints(prevPoints => prevPoints + 50);\n      const updatedPlantGoals = [...plantGoals];\n      updatedPlantGoals[level - 1].achieved = true;\n      setPlantGoals(updatedPlantGoals);\n    }\n  }, [moistureLevel]);\n\n  const getMoistureLevelInfo = () => {\n    if (moistureLevel <= 30) {\n      return 'The soil is dry. The plant needs watering.';\n    } else if (moistureLevel <= 70) {\n      return 'The soil is moist. The plant is in a healthy state.';\n    } else {\n      return 'The soil is wet. Avoid overwatering to prevent root rot.';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PlantCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"MoistureLevel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Moisture Level: \", moistureLevel), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"MoistureLevelInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, getMoistureLevelInfo()), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"PlantImage\",\n    src: getPlantImage(),\n    alt: \"Plant\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ControlButtons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: true,\n    onClick: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"Decrease Moisture\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: isWatering ? 'StopWateringButton' : 'StartWateringButton',\n    onClick: toggleWatering,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, isWatering ? 'Stop Watering' : 'Start Watering')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GamificationInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Points: \", points), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Level: \", level)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GoalsInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Plant Goals\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, plantGoals.map(plant => /*#__PURE__*/React.createElement(\"li\", {\n    key: plant.id,\n    className: plant.achieved ? 'AchievedGoal' : 'NotAchievedGoal',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Goal \", plant.id, \": Maintain moisture between \", plant.minMoisture, \"% and \", plant.maxMoisture, \"% -\", ' ', plant.achieved ? 'Achieved' : 'Not achieved')))));\n};\n\nexport default Plant;","map":{"version":3,"sources":["/home/sdn/Downloads/PlantQ/src/Plant.js"],"names":["React","useState","useEffect","dryImage","moistImage","wetImage","mqtt","client","connect","Plant","moistureLevel","setMoistureLevel","points","setPoints","level","setLevel","plantGoals","setPlantGoals","id","minMoisture","maxMoisture","achieved","isWatering","setIsWatering","on","subscribe","topic","message","parseInt","toString","end","getPlantImage","toggleWatering","prevPoints","Math","max","publish","length","prevLevel","updatedPlantGoals","getMoistureLevelInfo","map","plant"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Plant.css';\nimport dryImage from './dry.png';\nimport moistImage from './moist.png';\nimport wetImage from './wet.png';\nimport mqtt from 'mqtt';\n\nconst client = mqtt.connect('mqtt://localhost:8084');\n\nconst Plant = () => {\n  const [moistureLevel, setMoistureLevel] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [plantGoals, setPlantGoals] = useState([\n    { id: 1, minMoisture: 30, maxMoisture: 70, achieved: false },\n    { id: 2, minMoisture: 40, maxMoisture: 60, achieved: false },\n    { id: 3, minMoisture: 50, maxMoisture: 70, achieved: false }\n  ]);\n  const [isWatering, setIsWatering] = useState(false);\n\n  useEffect(() => {\n    client.on('connect', () => {\n      client.subscribe('plant/moistureLevel');\n    });\n\n    client.on('message', (topic, message) => {\n      if (topic === 'plant/moistureLevel') {\n        setMoistureLevel(parseInt(message.toString()));\n      }\n    });\n\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  const getPlantImage = () => {\n    if (moistureLevel <= 30) {\n      return dryImage;\n    } else if (moistureLevel <= 70) {\n      return moistImage;\n    } else {\n      return wetImage;\n    }\n  };\n\n  const toggleWatering = () => {\n    if (!isWatering) {\n      // Start watering\n      if (moistureLevel < 70) {\n        // Correct action - Increment points\n        setPoints(prevPoints => prevPoints + 20);\n      } else {\n        // Wrong action - Reduce points\n        setPoints(prevPoints => Math.max(prevPoints - 20, 0));\n      }\n      setIsWatering(true);\n\n      // Send command to start watering\n      client.publish('plant/command', 'start');\n    } else {\n      // Stop watering\n      setIsWatering(false);\n\n      // Send command to stop watering\n      client.publish('plant/command', 'stop');\n    }\n  };\n\n  useEffect(() => {\n    // Check level up condition whenever moisture level changes\n    if (\n      level <= plantGoals.length &&\n      moistureLevel >= plantGoals[level - 1].minMoisture &&\n      moistureLevel <= plantGoals[level - 1].maxMoisture &&\n      !plantGoals[level - 1].achieved\n    ) {\n      setLevel(prevLevel => prevLevel + 1);\n      setPoints(prevPoints => prevPoints + 50);\n      const updatedPlantGoals = [...plantGoals];\n      updatedPlantGoals[level - 1].achieved = true;\n      setPlantGoals(updatedPlantGoals);\n    }\n  }, [moistureLevel]);\n\n  const getMoistureLevelInfo = () => {\n    if (moistureLevel <= 30) {\n      return 'The soil is dry. The plant needs watering.';\n    } else if (moistureLevel <= 70) {\n      return 'The soil is moist. The plant is in a healthy state.';\n    } else {\n      return 'The soil is wet. Avoid overwatering to prevent root rot.';\n    }\n  };\n\n  return (\n    <div className=\"PlantCard\">\n      <p className=\"MoistureLevel\">Moisture Level: {moistureLevel}</p>\n      <p className=\"MoistureLevelInfo\">{getMoistureLevelInfo()}</p>\n      <img className=\"PlantImage\" src={getPlantImage()} alt=\"Plant\" />\n      <div className=\"ControlButtons\">\n        <button disabled={true} onClick={() => {}}>\n          Decrease Moisture\n        </button>\n        <button\n          className={isWatering ? 'StopWateringButton' : 'StartWateringButton'}\n          onClick={toggleWatering}\n        >\n          {isWatering ? 'Stop Watering' : 'Start Watering'}\n        </button>\n      </div>\n      <div className=\"GamificationInfo\">\n        <p>Points: {points}</p>\n        <p>Level: {level}</p>\n      </div>\n      <div className=\"GoalsInfo\">\n        <h2>Plant Goals</h2>\n        <ul>\n          {plantGoals.map(plant => (\n            <li\n              key={plant.id}\n              className={plant.achieved ? 'AchievedGoal' : 'NotAchievedGoal'}\n            >\n              Goal {plant.id}: Maintain moisture between {plant.minMoisture}% and {plant.maxMoisture}% -{' '}\n              {plant.achieved ? 'Achieved' : 'Not achieved'}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Plant;\n\n"]},"metadata":{},"sourceType":"module"}