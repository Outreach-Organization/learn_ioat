{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (e, n) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (e, n) {\n      e.__proto__ = n;\n    } || function (e, n) {\n      for (var t in n) if (Object.prototype.hasOwnProperty.call(n, t)) e[t] = n[t];\n    };\n\n    return extendStatics(e, n);\n  };\n\n  return function (e, n) {\n    if (typeof n !== \"function\" && n !== null) throw new TypeError(\"Class extends value \" + String(n) + \" is not a constructor or null\");\n    extendStatics(e, n);\n\n    function __() {\n      this.constructor = e;\n    }\n\n    e.prototype = n === null ? Object.create(n) : (__.prototype = n.prototype, new __());\n  };\n}();\n\nvar TreeNode = function () {\n  function TreeNode(e, n) {\n    this.ee = 1;\n    this.u = undefined;\n    this.p = undefined;\n    this.K = undefined;\n    this.N = undefined;\n    this.rr = undefined;\n    this.u = e;\n    this.p = n;\n  }\n\n  TreeNode.prototype.L = function () {\n    var e = this;\n\n    if (e.ee === 1 && e.rr.rr === e) {\n      e = e.N;\n    } else if (e.K) {\n      e = e.K;\n\n      while (e.N) {\n        e = e.N;\n      }\n    } else {\n      var n = e.rr;\n\n      while (n.K === e) {\n        e = n;\n        n = e.rr;\n      }\n\n      e = n;\n    }\n\n    return e;\n  };\n\n  TreeNode.prototype.m = function () {\n    var e = this;\n\n    if (e.N) {\n      e = e.N;\n\n      while (e.K) {\n        e = e.K;\n      }\n\n      return e;\n    } else {\n      var n = e.rr;\n\n      while (n.N === e) {\n        e = n;\n        n = e.rr;\n      }\n\n      if (e.N !== n) {\n        return n;\n      } else return e;\n    }\n  };\n\n  TreeNode.prototype.ne = function () {\n    var e = this.rr;\n    var n = this.N;\n    var t = n.K;\n    if (e.rr === this) e.rr = n;else if (e.K === this) e.K = n;else e.N = n;\n    n.rr = e;\n    n.K = this;\n    this.rr = n;\n    this.N = t;\n    if (t) t.rr = this;\n    return n;\n  };\n\n  TreeNode.prototype.te = function () {\n    var e = this.rr;\n    var n = this.K;\n    var t = n.N;\n    if (e.rr === this) e.rr = n;else if (e.K === this) e.K = n;else e.N = n;\n    n.rr = e;\n    n.N = this;\n    this.rr = n;\n    this.K = t;\n    if (t) t.rr = this;\n    return n;\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n\nvar TreeNodeEnableIndex = function (e) {\n  __extends(TreeNodeEnableIndex, e);\n\n  function TreeNodeEnableIndex() {\n    var n = e !== null && e.apply(this, arguments) || this;\n    n.tr = 1;\n    return n;\n  }\n\n  TreeNodeEnableIndex.prototype.ne = function () {\n    var n = e.prototype.ne.call(this);\n    this.ie();\n    n.ie();\n    return n;\n  };\n\n  TreeNodeEnableIndex.prototype.te = function () {\n    var n = e.prototype.te.call(this);\n    this.ie();\n    n.ie();\n    return n;\n  };\n\n  TreeNodeEnableIndex.prototype.ie = function () {\n    this.tr = 1;\n\n    if (this.K) {\n      this.tr += this.K.tr;\n    }\n\n    if (this.N) {\n      this.tr += this.N.tr;\n    }\n  };\n\n  return TreeNodeEnableIndex;\n}(TreeNode);\n\nexport { TreeNodeEnableIndex };","map":{"version":3,"sources":["container/TreeContainer/Base/TreeNode.js","../../src/container/TreeContainer/Base/TreeNode.ts"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","TreeNode","_this","TreeNodeEnableIndex","undefined","key","value","_key","_value","preNode","_color","_parent","_right","_left","pre","nextNode","PP","V","R","F","K","parent","_super","_rotateLeft","_recount","_rotateRight","_subTreeSize"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar TreeNode = /** @class */ (function () {\n    function TreeNode(key, value) {\n        this._color = 1 /* TreeNodeColor.RED */;\n        this._key = undefined;\n        this._value = undefined;\n        this._left = undefined;\n        this._right = undefined;\n        this._parent = undefined;\n        this._key = key;\n        this._value = value;\n    }\n    /**\n     * @description Get the pre node.\n     * @returns TreeNode about the pre node.\n     */\n    TreeNode.prototype._pre = function () {\n        var preNode = this;\n        if (preNode._color === 1 /* TreeNodeColor.RED */ &&\n            preNode._parent._parent === preNode) {\n            preNode = preNode._right;\n        }\n        else if (preNode._left) {\n            preNode = preNode._left;\n            while (preNode._right) {\n                preNode = preNode._right;\n            }\n        }\n        else {\n            var pre = preNode._parent;\n            while (pre._left === preNode) {\n                preNode = pre;\n                pre = preNode._parent;\n            }\n            preNode = pre;\n        }\n        return preNode;\n    };\n    /**\n     * @description Get the next node.\n     * @returns TreeNode about the next node.\n     */\n    TreeNode.prototype._next = function () {\n        var nextNode = this;\n        if (nextNode._right) {\n            nextNode = nextNode._right;\n            while (nextNode._left) {\n                nextNode = nextNode._left;\n            }\n            return nextNode;\n        }\n        else {\n            var pre = nextNode._parent;\n            while (pre._right === nextNode) {\n                nextNode = pre;\n                pre = nextNode._parent;\n            }\n            if (nextNode._right !== pre) {\n                return pre;\n            }\n            else\n                return nextNode;\n        }\n    };\n    /**\n     * @description Rotate left.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype._rotateLeft = function () {\n        var PP = this._parent;\n        var V = this._right;\n        var R = V._left;\n        if (PP._parent === this)\n            PP._parent = V;\n        else if (PP._left === this)\n            PP._left = V;\n        else\n            PP._right = V;\n        V._parent = PP;\n        V._left = this;\n        this._parent = V;\n        this._right = R;\n        if (R)\n            R._parent = this;\n        return V;\n    };\n    /**\n     * @description Rotate right.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNode.prototype._rotateRight = function () {\n        var PP = this._parent;\n        var F = this._left;\n        var K = F._right;\n        if (PP._parent === this)\n            PP._parent = F;\n        else if (PP._left === this)\n            PP._left = F;\n        else\n            PP._right = F;\n        F._parent = PP;\n        F._right = this;\n        this._parent = F;\n        this._left = K;\n        if (K)\n            K._parent = this;\n        return F;\n    };\n    return TreeNode;\n}());\nexport { TreeNode };\nvar TreeNodeEnableIndex = /** @class */ (function (_super) {\n    __extends(TreeNodeEnableIndex, _super);\n    function TreeNodeEnableIndex() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._subTreeSize = 1;\n        return _this;\n    }\n    /**\n     * @description Rotate left and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNodeEnableIndex.prototype._rotateLeft = function () {\n        var parent = _super.prototype._rotateLeft.call(this);\n        this._recount();\n        parent._recount();\n        return parent;\n    };\n    /**\n     * @description Rotate right and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    TreeNodeEnableIndex.prototype._rotateRight = function () {\n        var parent = _super.prototype._rotateRight.call(this);\n        this._recount();\n        parent._recount();\n        return parent;\n    };\n    TreeNodeEnableIndex.prototype._recount = function () {\n        this._subTreeSize = 1;\n        if (this._left) {\n            this._subTreeSize += this._left._subTreeSize;\n        }\n        if (this._right) {\n            this._subTreeSize += this._right._subTreeSize;\n        }\n    };\n    return TreeNodeEnableIndex;\n}(TreeNode));\nexport { TreeNodeEnableIndex };\n","export const enum TreeNodeColor {\n  RED = 1,\n  BLACK = 0\n}\n\nexport class TreeNode<K, V> {\n  _color = TreeNodeColor.RED;\n  _key: K | undefined = undefined;\n  _value: V | undefined = undefined;\n  _left: TreeNode<K, V> | undefined = undefined;\n  _right: TreeNode<K, V> | undefined = undefined;\n  _parent: TreeNode<K, V> | undefined = undefined;\n  constructor(key?: K, value?: V) {\n    this._key = key;\n    this._value = value;\n  }\n  /**\n   * @description Get the pre node.\n   * @returns TreeNode about the pre node.\n   */\n  _pre() {\n    let preNode: TreeNode<K, V> = this;\n    if (\n      preNode._color === TreeNodeColor.RED &&\n      preNode._parent!._parent === preNode\n    ) {\n      preNode = preNode._right!;\n    } else if (preNode._left) {\n      preNode = preNode._left;\n      while (preNode._right) {\n        preNode = preNode._right;\n      }\n    } else {\n      let pre = preNode._parent!;\n      while (pre._left === preNode) {\n        preNode = pre;\n        pre = preNode._parent!;\n      }\n      preNode = pre;\n    }\n    return preNode;\n  }\n  /**\n   * @description Get the next node.\n   * @returns TreeNode about the next node.\n   */\n  _next() {\n    let nextNode: TreeNode<K, V> = this;\n    if (nextNode._right) {\n      nextNode = nextNode._right;\n      while (nextNode._left) {\n        nextNode = nextNode._left;\n      }\n      return nextNode;\n    } else {\n      let pre = nextNode._parent!;\n      while (pre._right === nextNode) {\n        nextNode = pre;\n        pre = nextNode._parent!;\n      }\n      if (nextNode._right !== pre) {\n        return pre;\n      } else return nextNode;\n    }\n  }\n  /**\n   * @description Rotate left.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const PP = this._parent!;\n    const V = this._right!;\n    const R = V._left;\n\n    if (PP._parent === this) PP._parent = V;\n    else if (PP._left === this) PP._left = V;\n    else PP._right = V;\n\n    V._parent = PP;\n    V._left = this;\n\n    this._parent = V;\n    this._right = R;\n\n    if (R) R._parent = this;\n\n    return V;\n  }\n  /**\n   * @description Rotate right.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const PP = this._parent!;\n    const F = this._left!;\n    const K = F._right;\n\n    if (PP._parent === this) PP._parent = F;\n    else if (PP._left === this) PP._left = F;\n    else PP._right = F;\n\n    F._parent = PP;\n    F._right = this;\n\n    this._parent = F;\n    this._left = K;\n\n    if (K) K._parent = this;\n\n    return F;\n  }\n}\n\nexport class TreeNodeEnableIndex<K, V> extends TreeNode<K, V> {\n  _subTreeSize = 1;\n  /**\n   * @description Rotate left and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const parent = super._rotateLeft() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  /**\n   * @description Rotate right and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const parent = super._rotateRight() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  _recount() {\n    this._subTreeSize = 1;\n    if (this._left) {\n      this._subTreeSize += (this._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    if (this._right) {\n      this._subTreeSize += (this._right as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}