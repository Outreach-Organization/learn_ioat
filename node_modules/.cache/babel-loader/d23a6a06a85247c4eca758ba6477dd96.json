{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (t, i) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (t, i) {\n      t.__proto__ = i;\n    } || function (t, i) {\n      for (var r in i) if (Object.prototype.hasOwnProperty.call(i, r)) t[r] = i[r];\n    };\n\n    return extendStatics(t, i);\n  };\n\n  return function (t, i) {\n    if (typeof i !== \"function\" && i !== null) throw new TypeError(\"Class extends value \" + String(i) + \" is not a constructor or null\");\n    extendStatics(t, i);\n\n    function __() {\n      this.constructor = t;\n    }\n\n    t.prototype = i === null ? Object.create(i) : (__.prototype = i.prototype, new __());\n  };\n}();\n\nvar __generator = this && this.i || function (t, i) {\n  var r = {\n    label: 0,\n    sent: function () {\n      if (e[0] & 1) throw e[1];\n      return e[1];\n    },\n    trys: [],\n    ops: []\n  },\n      n,\n      s,\n      e,\n      h;\n  return h = {\n    next: verb(0),\n    throw: verb(1),\n    return: verb(2)\n  }, typeof Symbol === \"function\" && (h[Symbol.iterator] = function () {\n    return this;\n  }), h;\n\n  function verb(t) {\n    return function (i) {\n      return step([t, i]);\n    };\n  }\n\n  function step(h) {\n    if (n) throw new TypeError(\"Generator is already executing.\");\n\n    while (r) try {\n      if (n = 1, s && (e = h[0] & 2 ? s[\"return\"] : h[0] ? s[\"throw\"] || ((e = s[\"return\"]) && e.call(s), 0) : s.next) && !(e = e.call(s, h[1])).done) return e;\n      if (s = 0, e) h = [h[0] & 2, e.value];\n\n      switch (h[0]) {\n        case 0:\n        case 1:\n          e = h;\n          break;\n\n        case 4:\n          r.label++;\n          return {\n            value: h[1],\n            done: false\n          };\n\n        case 5:\n          r.label++;\n          s = h[1];\n          h = [0];\n          continue;\n\n        case 7:\n          h = r.ops.pop();\n          r.trys.pop();\n          continue;\n\n        default:\n          if (!(e = r.trys, e = e.length > 0 && e[e.length - 1]) && (h[0] === 6 || h[0] === 2)) {\n            r = 0;\n            continue;\n          }\n\n          if (h[0] === 3 && (!e || h[1] > e[0] && h[1] < e[3])) {\n            r.label = h[1];\n            break;\n          }\n\n          if (h[0] === 6 && r.label < e[1]) {\n            r.label = e[1];\n            e = h;\n            break;\n          }\n\n          if (e && r.label < e[2]) {\n            r.label = e[2];\n            r.ops.push(h);\n            break;\n          }\n\n          if (e[2]) r.ops.pop();\n          r.trys.pop();\n          continue;\n      }\n\n      h = i.call(t, r);\n    } catch (t) {\n      h = [6, t];\n      s = 0;\n    } finally {\n      n = e = 0;\n    }\n\n    if (h[0] & 5) throw h[1];\n    return {\n      value: h[0] ? h[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport SequentialContainer from \"./Base\";\nimport { ContainerIterator } from \"../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\n\nvar LinkListIterator = function (t) {\n  __extends(LinkListIterator, t);\n\n  function LinkListIterator(i, r, n, s) {\n    var e = t.call(this, s) || this;\n    e.o = i;\n    e.h = r;\n    e.container = n;\n\n    if (e.iteratorType === 0) {\n      e.pre = function () {\n        if (this.o.L === this.h) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.L;\n        return this;\n      };\n\n      e.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.m;\n        return this;\n      };\n    } else {\n      e.pre = function () {\n        if (this.o.m === this.h) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.m;\n        return this;\n      };\n\n      e.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.L;\n        return this;\n      };\n    }\n\n    return e;\n  }\n\n  Object.defineProperty(LinkListIterator.prototype, \"pointer\", {\n    get: function () {\n      if (this.o === this.h) {\n        throwIteratorAccessError();\n      }\n\n      return this.o.p;\n    },\n    set: function (t) {\n      if (this.o === this.h) {\n        throwIteratorAccessError();\n      }\n\n      this.o.p = t;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LinkListIterator.prototype.copy = function () {\n    return new LinkListIterator(this.o, this.h, this.container, this.iteratorType);\n  };\n\n  return LinkListIterator;\n}(ContainerIterator);\n\nvar LinkList = function (t) {\n  __extends(LinkList, t);\n\n  function LinkList(i) {\n    if (i === void 0) {\n      i = [];\n    }\n\n    var r = t.call(this) || this;\n    r.h = {};\n    r.H = r.l = r.h.L = r.h.m = r.h;\n    var n = r;\n    i.forEach(function (t) {\n      n.pushBack(t);\n    });\n    return r;\n  }\n\n  LinkList.prototype.G = function (t) {\n    var i = t.L,\n        r = t.m;\n    i.m = r;\n    r.L = i;\n\n    if (t === this.H) {\n      this.H = r;\n    }\n\n    if (t === this.l) {\n      this.l = i;\n    }\n\n    this.M -= 1;\n  };\n\n  LinkList.prototype.F = function (t, i) {\n    var r = i.m;\n    var n = {\n      p: t,\n      L: i,\n      m: r\n    };\n    i.m = n;\n    r.L = n;\n\n    if (i === this.h) {\n      this.H = n;\n    }\n\n    if (r === this.h) {\n      this.l = n;\n    }\n\n    this.M += 1;\n  };\n\n  LinkList.prototype.clear = function () {\n    this.M = 0;\n    this.H = this.l = this.h.L = this.h.m = this.h;\n  };\n\n  LinkList.prototype.begin = function () {\n    return new LinkListIterator(this.H, this.h, this);\n  };\n\n  LinkList.prototype.end = function () {\n    return new LinkListIterator(this.h, this.h, this);\n  };\n\n  LinkList.prototype.rBegin = function () {\n    return new LinkListIterator(this.l, this.h, this, 1);\n  };\n\n  LinkList.prototype.rEnd = function () {\n    return new LinkListIterator(this.h, this.h, this, 1);\n  };\n\n  LinkList.prototype.front = function () {\n    return this.H.p;\n  };\n\n  LinkList.prototype.back = function () {\n    return this.l.p;\n  };\n\n  LinkList.prototype.getElementByPos = function (t) {\n    if (t < 0 || t > this.M - 1) {\n      throw new RangeError();\n    }\n\n    var i = this.H;\n\n    while (t--) {\n      i = i.m;\n    }\n\n    return i.p;\n  };\n\n  LinkList.prototype.eraseElementByPos = function (t) {\n    if (t < 0 || t > this.M - 1) {\n      throw new RangeError();\n    }\n\n    var i = this.H;\n\n    while (t--) {\n      i = i.m;\n    }\n\n    this.G(i);\n    return this.M;\n  };\n\n  LinkList.prototype.eraseElementByValue = function (t) {\n    var i = this.H;\n\n    while (i !== this.h) {\n      if (i.p === t) {\n        this.G(i);\n      }\n\n      i = i.m;\n    }\n\n    return this.M;\n  };\n\n  LinkList.prototype.eraseElementByIterator = function (t) {\n    var i = t.o;\n\n    if (i === this.h) {\n      throwIteratorAccessError();\n    }\n\n    t = t.next();\n    this.G(i);\n    return t;\n  };\n\n  LinkList.prototype.pushBack = function (t) {\n    this.F(t, this.l);\n    return this.M;\n  };\n\n  LinkList.prototype.popBack = function () {\n    if (this.M === 0) return;\n    var t = this.l.p;\n    this.G(this.l);\n    return t;\n  };\n\n  LinkList.prototype.pushFront = function (t) {\n    this.F(t, this.h);\n    return this.M;\n  };\n\n  LinkList.prototype.popFront = function () {\n    if (this.M === 0) return;\n    var t = this.H.p;\n    this.G(this.H);\n    return t;\n  };\n\n  LinkList.prototype.setElementByPos = function (t, i) {\n    if (t < 0 || t > this.M - 1) {\n      throw new RangeError();\n    }\n\n    var r = this.H;\n\n    while (t--) {\n      r = r.m;\n    }\n\n    r.p = i;\n  };\n\n  LinkList.prototype.insert = function (t, i, r) {\n    if (r === void 0) {\n      r = 1;\n    }\n\n    if (t < 0 || t > this.M) {\n      throw new RangeError();\n    }\n\n    if (r <= 0) return this.M;\n\n    if (t === 0) {\n      while (r--) this.pushFront(i);\n    } else if (t === this.M) {\n      while (r--) this.pushBack(i);\n    } else {\n      var n = this.H;\n\n      for (var s = 1; s < t; ++s) {\n        n = n.m;\n      }\n\n      var e = n.m;\n      this.M += r;\n\n      while (r--) {\n        n.m = {\n          p: i,\n          L: n\n        };\n        n.m.L = n;\n        n = n.m;\n      }\n\n      n.m = e;\n      e.L = n;\n    }\n\n    return this.M;\n  };\n\n  LinkList.prototype.find = function (t) {\n    var i = this.H;\n\n    while (i !== this.h) {\n      if (i.p === t) {\n        return new LinkListIterator(i, this.h, this);\n      }\n\n      i = i.m;\n    }\n\n    return this.end();\n  };\n\n  LinkList.prototype.reverse = function () {\n    if (this.M <= 1) return;\n    var t = this.H;\n    var i = this.l;\n    var r = 0;\n\n    while (r << 1 < this.M) {\n      var n = t.p;\n      t.p = i.p;\n      i.p = n;\n      t = t.m;\n      i = i.L;\n      r += 1;\n    }\n  };\n\n  LinkList.prototype.unique = function () {\n    if (this.M <= 1) {\n      return this.M;\n    }\n\n    var t = this.H;\n\n    while (t !== this.h) {\n      var i = t;\n\n      while (i.m !== this.h && i.p === i.m.p) {\n        i = i.m;\n        this.M -= 1;\n      }\n\n      t.m = i.m;\n      t.m.L = t;\n      t = t.m;\n    }\n\n    return this.M;\n  };\n\n  LinkList.prototype.sort = function (t) {\n    if (this.M <= 1) return;\n    var i = [];\n    this.forEach(function (t) {\n      i.push(t);\n    });\n    i.sort(t);\n    var r = this.H;\n    i.forEach(function (t) {\n      r.p = t;\n      r = r.m;\n    });\n  };\n\n  LinkList.prototype.merge = function (t) {\n    var i = this;\n\n    if (this.M === 0) {\n      t.forEach(function (t) {\n        i.pushBack(t);\n      });\n    } else {\n      var r = this.H;\n      t.forEach(function (t) {\n        while (r !== i.h && r.p <= t) {\n          r = r.m;\n        }\n\n        i.F(t, r.L);\n      });\n    }\n\n    return this.M;\n  };\n\n  LinkList.prototype.forEach = function (t) {\n    var i = this.H;\n    var r = 0;\n\n    while (i !== this.h) {\n      t(i.p, r++, this);\n      i = i.m;\n    }\n  };\n\n  LinkList.prototype[Symbol.iterator] = function () {\n    return function () {\n      var t;\n      return __generator(this, function (i) {\n        switch (i.label) {\n          case 0:\n            if (this.M === 0) return [2];\n            t = this.H;\n            i.label = 1;\n\n          case 1:\n            if (!(t !== this.h)) return [3, 3];\n            return [4, t.p];\n\n          case 2:\n            i.sent();\n            t = t.m;\n            return [3, 1];\n\n          case 3:\n            return [2];\n        }\n      });\n    }.bind(this)();\n  };\n\n  return LinkList;\n}(SequentialContainer);\n\nexport default LinkList;","map":{"version":3,"sources":["container/SequentialContainer/LinkList.js","../../src/container/SequentialContainer/LinkList.ts"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__generator","thisArg","body","_","label","sent","t","trys","ops","f","y","g","next","verb","throw","return","Symbol","iterator","n","v","step","op","done","value","pop","length","push","e","_this","get","set","enumerable","configurable","curNode","_a","SequentialContainer","ContainerIterator","throwIteratorAccessError","RangeError","_node","_header","container","iteratorType","_super","pre","_pre","_next","LinkListIterator","_value","newValue","_head","_tail","self","forEach","el","pushBack","LinkList","node","_length","pos","_eraseNode","iter","element","_insertNode","num","pushFront","i","end","pHead","pTail","cnt","tmp","tmpNode","cmp","arr","sort","list","curNode_1","callback","index","bind"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport SequentialContainer from './Base';\nimport { ContainerIterator } from \"../ContainerBase\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar LinkListIterator = /** @class */ (function (_super) {\n    __extends(LinkListIterator, _super);\n    /**\n     * @internal\n     */\n    function LinkListIterator(_node, _header, container, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = _node;\n        _this._header = _header;\n        _this.container = container;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node._pre === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node._next === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(LinkListIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._value;\n        },\n        set: function (newValue) {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            this._node._value = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LinkListIterator.prototype.copy = function () {\n        return new LinkListIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return LinkListIterator;\n}(ContainerIterator));\nvar LinkList = /** @class */ (function (_super) {\n    __extends(LinkList, _super);\n    function LinkList(container) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this) || this;\n        _this._header = {};\n        _this._head = _this._tail = _this._header._pre = _this._header._next = _this._header;\n        var self = _this;\n        container.forEach(function (el) {\n            self.pushBack(el);\n        });\n        return _this;\n    }\n    /**\n     * @internal\n     */\n    LinkList.prototype._eraseNode = function (node) {\n        var _pre = node._pre, _next = node._next;\n        _pre._next = _next;\n        _next._pre = _pre;\n        if (node === this._head) {\n            this._head = _next;\n        }\n        if (node === this._tail) {\n            this._tail = _pre;\n        }\n        this._length -= 1;\n    };\n    /**\n     * @internal\n     */\n    LinkList.prototype._insertNode = function (value, pre) {\n        var next = pre._next;\n        var node = {\n            _value: value,\n            _pre: pre,\n            _next: next\n        };\n        pre._next = node;\n        next._pre = node;\n        if (pre === this._header) {\n            this._head = node;\n        }\n        if (next === this._header) {\n            this._tail = node;\n        }\n        this._length += 1;\n    };\n    LinkList.prototype.clear = function () {\n        this._length = 0;\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n    };\n    LinkList.prototype.begin = function () {\n        return new LinkListIterator(this._head, this._header, this);\n    };\n    LinkList.prototype.end = function () {\n        return new LinkListIterator(this._header, this._header, this);\n    };\n    LinkList.prototype.rBegin = function () {\n        return new LinkListIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    LinkList.prototype.rEnd = function () {\n        return new LinkListIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    LinkList.prototype.front = function () {\n        return this._head._value;\n    };\n    LinkList.prototype.back = function () {\n        return this._tail._value;\n    };\n    LinkList.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        return curNode._value;\n    };\n    LinkList.prototype.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        this._eraseNode(curNode);\n        return this._length;\n    };\n    LinkList.prototype.eraseElementByValue = function (_value) {\n        var curNode = this._head;\n        while (curNode !== this._header) {\n            if (curNode._value === _value) {\n                this._eraseNode(curNode);\n            }\n            curNode = curNode._next;\n        }\n        return this._length;\n    };\n    LinkList.prototype.eraseElementByIterator = function (iter) {\n        var node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        iter = iter.next();\n        this._eraseNode(node);\n        return iter;\n    };\n    LinkList.prototype.pushBack = function (element) {\n        this._insertNode(element, this._tail);\n        return this._length;\n    };\n    LinkList.prototype.popBack = function () {\n        if (this._length === 0)\n            return;\n        var value = this._tail._value;\n        this._eraseNode(this._tail);\n        return value;\n    };\n    /**\n     * @description Push an element to the front.\n     * @param element - The element you want to push.\n     * @returns The size of queue after pushing.\n     */\n    LinkList.prototype.pushFront = function (element) {\n        this._insertNode(element, this._header);\n        return this._length;\n    };\n    /**\n     * @description Removes the first element.\n     * @returns The element you popped.\n     */\n    LinkList.prototype.popFront = function () {\n        if (this._length === 0)\n            return;\n        var value = this._head._value;\n        this._eraseNode(this._head);\n        return value;\n    };\n    LinkList.prototype.setElementByPos = function (pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        curNode._value = element;\n    };\n    LinkList.prototype.insert = function (pos, element, num) {\n        if (num === void 0) { num = 1; }\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        if (num <= 0)\n            return this._length;\n        if (pos === 0) {\n            while (num--)\n                this.pushFront(element);\n        }\n        else if (pos === this._length) {\n            while (num--)\n                this.pushBack(element);\n        }\n        else {\n            var curNode = this._head;\n            for (var i = 1; i < pos; ++i) {\n                curNode = curNode._next;\n            }\n            var next = curNode._next;\n            this._length += num;\n            while (num--) {\n                curNode._next = {\n                    _value: element,\n                    _pre: curNode\n                };\n                curNode._next._pre = curNode;\n                curNode = curNode._next;\n            }\n            curNode._next = next;\n            next._pre = curNode;\n        }\n        return this._length;\n    };\n    LinkList.prototype.find = function (element) {\n        var curNode = this._head;\n        while (curNode !== this._header) {\n            if (curNode._value === element) {\n                return new LinkListIterator(curNode, this._header, this);\n            }\n            curNode = curNode._next;\n        }\n        return this.end();\n    };\n    LinkList.prototype.reverse = function () {\n        if (this._length <= 1)\n            return;\n        var pHead = this._head;\n        var pTail = this._tail;\n        var cnt = 0;\n        while ((cnt << 1) < this._length) {\n            var tmp = pHead._value;\n            pHead._value = pTail._value;\n            pTail._value = tmp;\n            pHead = pHead._next;\n            pTail = pTail._pre;\n            cnt += 1;\n        }\n    };\n    LinkList.prototype.unique = function () {\n        if (this._length <= 1) {\n            return this._length;\n        }\n        var curNode = this._head;\n        while (curNode !== this._header) {\n            var tmpNode = curNode;\n            while (tmpNode._next !== this._header &&\n                tmpNode._value === tmpNode._next._value) {\n                tmpNode = tmpNode._next;\n                this._length -= 1;\n            }\n            curNode._next = tmpNode._next;\n            curNode._next._pre = curNode;\n            curNode = curNode._next;\n        }\n        return this._length;\n    };\n    LinkList.prototype.sort = function (cmp) {\n        if (this._length <= 1)\n            return;\n        var arr = [];\n        this.forEach(function (el) {\n            arr.push(el);\n        });\n        arr.sort(cmp);\n        var curNode = this._head;\n        arr.forEach(function (element) {\n            curNode._value = element;\n            curNode = curNode._next;\n        });\n    };\n    /**\n     * @description Merges two sorted lists.\n     * @param list - The other list you want to merge (must be sorted).\n     * @returns The size of list after merging.\n     * @example\n     * const linkA = new LinkList([1, 3, 5]);\n     * const linkB = new LinkList([2, 4, 6]);\n     * linkA.merge(linkB);  // [1, 2, 3, 4, 5];\n     */\n    LinkList.prototype.merge = function (list) {\n        var self = this;\n        if (this._length === 0) {\n            list.forEach(function (el) {\n                self.pushBack(el);\n            });\n        }\n        else {\n            var curNode_1 = this._head;\n            list.forEach(function (el) {\n                while (curNode_1 !== self._header &&\n                    curNode_1._value <= el) {\n                    curNode_1 = curNode_1._next;\n                }\n                self._insertNode(el, curNode_1._pre);\n            });\n        }\n        return this._length;\n    };\n    LinkList.prototype.forEach = function (callback) {\n        var curNode = this._head;\n        var index = 0;\n        while (curNode !== this._header) {\n            callback(curNode._value, index++, this);\n            curNode = curNode._next;\n        }\n    };\n    LinkList.prototype[Symbol.iterator] = function () {\n        return function () {\n            var curNode;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._length === 0)\n                            return [2 /*return*/];\n                        curNode = this._head;\n                        _a.label = 1;\n                    case 1:\n                        if (!(curNode !== this._header)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, curNode._value];\n                    case 2:\n                        _a.sent();\n                        curNode = curNode._next;\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }.bind(this)();\n    };\n    return LinkList;\n}(SequentialContainer));\nexport default LinkList;\n","import SequentialContainer from './Base';\nimport { ContainerIterator, initContainer, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\ntype LinkNode<T> = {\n  _value: T;\n  _pre: LinkNode<T>;\n  _next: LinkNode<T>;\n}\n\nclass LinkListIterator<T> extends ContainerIterator<T> {\n  readonly container: LinkList<T>;\n  /**\n   * @internal\n   */\n  _node: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private readonly _header: LinkNode<T>;\n  /**\n   * @internal\n   */\n  constructor(\n    _node: LinkNode<T>,\n    _header: LinkNode<T>,\n    container: LinkList<T>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = _node;\n    this._header = _header;\n    this.container = container;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node._pre === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node._next === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n    }\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._value;\n  }\n  set pointer(newValue: T) {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    this._node._value = newValue;\n  }\n  copy() {\n    return new LinkListIterator<T>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: LinkListIterator<T>): boolean;\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport type { LinkListIterator };\n\nclass LinkList<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private _head: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private _tail: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private readonly _header: LinkNode<T>;\n  constructor(container: initContainer<T> = []) {\n    super();\n    this._header = <LinkNode<T>>{};\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n    const self = this;\n    container.forEach(function (el) {\n      self.pushBack(el);\n    });\n  }\n  /**\n   * @internal\n   */\n  private _eraseNode(node: LinkNode<T>) {\n    const { _pre, _next } = node;\n    _pre._next = _next;\n    _next._pre = _pre;\n    if (node === this._head) {\n      this._head = _next;\n    }\n    if (node === this._tail) {\n      this._tail = _pre;\n    }\n    this._length -= 1;\n  }\n  /**\n   * @internal\n   */\n  private _insertNode(value: T, pre: LinkNode<T>) {\n    const next = pre._next;\n    const node = {\n      _value: value,\n      _pre: pre,\n      _next: next\n    };\n    pre._next = node;\n    next._pre = node;\n    if (pre === this._header) {\n      this._head = node;\n    }\n    if (next === this._header) {\n      this._tail = node;\n    }\n    this._length += 1;\n  }\n  clear() {\n    this._length = 0;\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n  }\n  begin() {\n    return new LinkListIterator<T>(this._head, this._header, this);\n  }\n  end() {\n    return new LinkListIterator<T>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new LinkListIterator<T>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new LinkListIterator<T>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    return this._head._value;\n  }\n  back(): T | undefined {\n    return this._tail._value;\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    return curNode._value;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    this._eraseNode(curNode);\n    return this._length;\n  }\n  eraseElementByValue(_value: T) {\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      if (curNode._value === _value) {\n        this._eraseNode(curNode);\n      }\n      curNode = curNode._next;\n    }\n    return this._length;\n  }\n  eraseElementByIterator(iter: LinkListIterator<T>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    iter = iter.next();\n    this._eraseNode(node);\n    return iter;\n  }\n  pushBack(element: T) {\n    this._insertNode(element, this._tail);\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    const value = this._tail._value;\n    this._eraseNode(this._tail);\n    return value;\n  }\n  /**\n   * @description Push an element to the front.\n   * @param element - The element you want to push.\n   * @returns The size of queue after pushing.\n   */\n  pushFront(element: T) {\n    this._insertNode(element, this._header);\n    return this._length;\n  }\n  /**\n   * @description Removes the first element.\n   * @returns The element you popped.\n   */\n  popFront() {\n    if (this._length === 0) return;\n    const value = this._head._value;\n    this._eraseNode(this._head);\n    return value;\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    curNode._value = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    if (num <= 0) return this._length;\n    if (pos === 0) {\n      while (num--) this.pushFront(element);\n    } else if (pos === this._length) {\n      while (num--) this.pushBack(element);\n    } else {\n      let curNode = this._head;\n      for (let i = 1; i < pos; ++i) {\n        curNode = curNode._next;\n      }\n      const next = curNode._next;\n      this._length += num;\n      while (num--) {\n        curNode._next = <LinkNode<T>>{\n          _value: element,\n          _pre: curNode\n        };\n        curNode._next._pre = curNode;\n        curNode = curNode._next;\n      }\n      curNode._next = next;\n      next._pre = curNode;\n    }\n    return this._length;\n  }\n  find(element: T) {\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      if (curNode._value === element) {\n        return new LinkListIterator<T>(curNode, this._header, this);\n      }\n      curNode = curNode._next;\n    }\n    return this.end();\n  }\n  reverse() {\n    if (this._length <= 1) return;\n    let pHead = this._head;\n    let pTail = this._tail;\n    let cnt = 0;\n    while ((cnt << 1) < this._length) {\n      const tmp = pHead._value;\n      pHead._value = pTail._value;\n      pTail._value = tmp;\n      pHead = pHead._next;\n      pTail = pTail._pre;\n      cnt += 1;\n    }\n  }\n  unique() {\n    if (this._length <= 1) {\n      return this._length;\n    }\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      let tmpNode = curNode;\n      while (\n        tmpNode._next !== this._header &&\n        tmpNode._value === tmpNode._next._value\n      ) {\n        tmpNode = tmpNode._next;\n        this._length -= 1;\n      }\n      curNode._next = tmpNode._next;\n      curNode._next._pre = curNode;\n      curNode = curNode._next;\n    }\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    if (this._length <= 1) return;\n    const arr: T[] = [];\n    this.forEach(function (el) {\n      arr.push(el);\n    });\n    arr.sort(cmp);\n    let curNode: LinkNode<T> = this._head;\n    arr.forEach(function (element) {\n      curNode._value = element;\n      curNode = curNode._next;\n    });\n  }\n  /**\n   * @description Merges two sorted lists.\n   * @param list - The other list you want to merge (must be sorted).\n   * @returns The size of list after merging.\n   * @example\n   * const linkA = new LinkList([1, 3, 5]);\n   * const linkB = new LinkList([2, 4, 6]);\n   * linkA.merge(linkB);  // [1, 2, 3, 4, 5];\n   */\n  merge(list: LinkList<T>) {\n    const self = this;\n    if (this._length === 0) {\n      list.forEach(function (el) {\n        self.pushBack(el);\n      });\n    } else {\n      let curNode = this._head;\n      list.forEach(function (el) {\n        while (\n          curNode !== self._header &&\n          curNode._value <= el\n        ) {\n          curNode = curNode._next;\n        }\n        self._insertNode(el, curNode._pre);\n      });\n    }\n    return this._length;\n  }\n  forEach(callback: (element: T, index: number, list: LinkList<T>) => void) {\n    let curNode = this._head;\n    let index = 0;\n    while (curNode !== this._header) {\n      callback(curNode._value, index++, this);\n      curNode = curNode._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: LinkList<T>) {\n      if (this._length === 0) return;\n      let curNode = this._head;\n      while (curNode !== this._header) {\n        yield curNode._value;\n        curNode = curNode._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default LinkList;\n"]},"metadata":{},"sourceType":"module"}