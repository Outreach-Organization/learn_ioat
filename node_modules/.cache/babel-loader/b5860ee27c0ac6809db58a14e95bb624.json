{"ast":null,"code":"var _jsxFileName = \"/home/nza/PlantQ/src/Plant.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Plant.css';\nimport dryImage from './dry.png';\nimport moistImage from './moist.png';\nimport wetImage from './wet.png';\n\nconst Plant = () => {\n  const [moistureLevel, setMoistureLevel] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [plantGoals, setPlantGoals] = useState([{\n    id: 1,\n    minMoisture: 30,\n    maxMoisture: 70,\n    achieved: false\n  }, {\n    id: 2,\n    minMoisture: 40,\n    maxMoisture: 60,\n    achieved: false\n  }, {\n    id: 3,\n    minMoisture: 50,\n    maxMoisture: 70,\n    achieved: false\n  }]);\n  const [isWatering, setIsWatering] = useState(false);\n  useEffect(() => {\n    // Generate random moisture levels every 5 seconds\n    const interval = setInterval(() => {\n      const randomLevel = Math.floor(Math.random() * 100) + 1; // Generate a random number between 1 and 100\n\n      setMoistureLevel(randomLevel);\n    }, 5000); // Generate data every 5 seconds\n    // Clean up the interval on component unmount\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getPlantImage = () => {\n    if (moistureLevel <= 30) {\n      return dryImage;\n    } else if (moistureLevel <= 70) {\n      return moistImage;\n    } else {\n      return wetImage;\n    }\n  };\n\n  const decreaseMoistureLevel = () => {\n    setMoistureLevel(prevLevel => Math.max(prevLevel - 10, 0));\n    setPoints(prevPoints => prevPoints + 10);\n  };\n\n  const toggleWatering = () => {\n    if (!isWatering) {\n      // Start watering\n      if (moistureLevel < 70) {\n        // Correct action - Increment points\n        setPoints(prevPoints => prevPoints + 20);\n      } else {\n        // Wrong action - Reduce points\n        setPoints(prevPoints => Math.max(prevPoints - 10, 0));\n      }\n\n      setIsWatering(true); // API call to start watering\n\n      fetch('your-api-start-endpoint').then(response => {// Handle the response\n      }).catch(error => {// Handle the error\n      });\n    } else {\n      // Stop watering\n      setIsWatering(false); // API call to stop watering\n\n      fetch('your-api-stop-endpoint').then(response => {// Handle the response\n      }).catch(error => {// Handle the error\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Check level up condition whenever moisture level changes\n    if (level <= plantGoals.length && moistureLevel >= plantGoals[level - 1].minMoisture && moistureLevel <= plantGoals[level - 1].maxMoisture && !plantGoals[level - 1].achieved) {\n      setLevel(prevLevel => prevLevel + 1);\n      setPoints(prevPoints => prevPoints + 50);\n      const updatedPlantGoals = [...plantGoals];\n      updatedPlantGoals[level - 1].achieved = true;\n      setPlantGoals(updatedPlantGoals);\n    }\n  }, [moistureLevel]);\n\n  const getMoistureLevelInfo = () => {\n    if (moistureLevel <= 30) {\n      return 'The soil is dry. The plant needs watering.';\n    } else if (moistureLevel <= 70) {\n      return 'The soil is moist. The plant is in a healthy state.';\n    } else {\n      return 'The soil is wet. Avoid overwatering to prevent root rot.';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PlantCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"MoistureLevel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 1\n    }\n  }, \"Moisture Level: \", moistureLevel), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"MoistureLevelInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 1\n    }\n  }, getMoistureLevelInfo()), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"PlantImage\",\n    src: getPlantImage(),\n    alt: \"Plant\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ControlButtons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: true,\n    onClick: decreaseMoistureLevel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 1\n    }\n  }, \"Decrease Moisture\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: isWatering ? 'StopWateringButton' : 'StartWateringButton',\n    onClick: toggleWatering,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 1\n    }\n  }, isWatering ? 'Stop Watering' : 'Start Watering')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GamificationInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 1\n    }\n  }, \"Points: \", points), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 1\n    }\n  }, \"Level: \", level)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GoalsInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 1\n    }\n  }, \"Plant Goals\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 1\n    }\n  }, plantGoals.map(plant => /*#__PURE__*/React.createElement(\"li\", {\n    key: plant.id,\n    className: plant.achieved ? 'AchievedGoal' : 'NotAchievedGoal',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 1\n    }\n  }, \"Goal \", plant.id, \": Maintain moisture between \", plant.minMoisture, \"% and \", plant.maxMoisture, \"% -\", ' ', plant.achieved ? 'Achieved' : 'Not achieved')))));\n};\n\nexport default Plant;","map":{"version":3,"sources":["/home/nza/PlantQ/src/Plant.js"],"names":["React","useState","useEffect","dryImage","moistImage","wetImage","Plant","moistureLevel","setMoistureLevel","points","setPoints","level","setLevel","plantGoals","setPlantGoals","id","minMoisture","maxMoisture","achieved","isWatering","setIsWatering","interval","setInterval","randomLevel","Math","floor","random","clearInterval","getPlantImage","decreaseMoistureLevel","prevLevel","max","prevPoints","toggleWatering","fetch","then","response","catch","error","length","updatedPlantGoals","getMoistureLevelInfo","map","plant"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Plant.css';\nimport dryImage from './dry.png';\nimport moistImage from './moist.png';\nimport wetImage from './wet.png';\n\nconst Plant = () => {\n  const [moistureLevel, setMoistureLevel] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [plantGoals, setPlantGoals] = useState([\n    { id: 1, minMoisture: 30, maxMoisture: 70, achieved: false },\n    { id: 2, minMoisture: 40, maxMoisture: 60, achieved: false },\n    { id: 3, minMoisture: 50, maxMoisture: 70, achieved: false }\n  ]);\n  const [isWatering, setIsWatering] = useState(false);\n\n  useEffect(() => {\n    // Generate random moisture levels every 5 seconds\n    const interval = setInterval(() => {\n      const randomLevel = Math.floor(Math.random() * 100) + 1; // Generate a random number between 1 and 100\n      setMoistureLevel(randomLevel);\n    }, 5000); // Generate data every 5 seconds\n\n    // Clean up the interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  const getPlantImage = () => {\n    if (moistureLevel <= 30) {\n      return dryImage;\n    } else if (moistureLevel <= 70) {\n      return moistImage;\n    } else {\n      return wetImage;\n    }\n  };\n\n  const decreaseMoistureLevel = () => {\n    setMoistureLevel(prevLevel => Math.max(prevLevel - 10, 0));\n    setPoints(prevPoints => prevPoints + 10);\n  };\n\n  const toggleWatering = () => {\n  if (!isWatering) {\n    // Start watering\n    if (moistureLevel < 70) {\n      // Correct action - Increment points\n      setPoints(prevPoints => prevPoints + 20);\n    } else {\n      // Wrong action - Reduce points\n      setPoints(prevPoints => Math.max(prevPoints - 10, 0));\n    }\n    setIsWatering(true);\n\n    // API call to start watering\n    fetch('your-api-start-endpoint')\n      .then(response => {\n        // Handle the response\n      })\n      .catch(error => {\n        // Handle the error\n      });\n  } else {\n    // Stop watering\n    setIsWatering(false);\n\n    // API call to stop watering\n    fetch('your-api-stop-endpoint')\n      .then(response => {\n        // Handle the response\n      })\n      .catch(error => {\n        // Handle the error\n      });\n  }\n};\n\n  useEffect(() => {\n    // Check level up condition whenever moisture level changes\n    if (\n      level <= plantGoals.length &&\n      moistureLevel >= plantGoals[level - 1].minMoisture &&\n      moistureLevel <= plantGoals[level - 1].maxMoisture &&\n      !plantGoals[level - 1].achieved\n    ) {\n      setLevel(prevLevel => prevLevel + 1);\n      setPoints(prevPoints => prevPoints + 50);\n      const updatedPlantGoals = [...plantGoals];\n      updatedPlantGoals[level - 1].achieved = true;\n      setPlantGoals(updatedPlantGoals);\n    }\n  }, [moistureLevel]);\n\n  const getMoistureLevelInfo = () => {\n    if (moistureLevel <= 30) {\n      return 'The soil is dry. The plant needs watering.';\n    } else if (moistureLevel <= 70) {\n      return 'The soil is moist. The plant is in a healthy state.';\n} else {\nreturn 'The soil is wet. Avoid overwatering to prevent root rot.';\n}\n};\n\nreturn (\n<div className=\"PlantCard\">\n<p className=\"MoistureLevel\">Moisture Level: {moistureLevel}</p>\n<p className=\"MoistureLevelInfo\">{getMoistureLevelInfo()}</p>\n<img className=\"PlantImage\" src={getPlantImage()} alt=\"Plant\" />\n<div className=\"ControlButtons\">\n<button disabled={true} onClick={decreaseMoistureLevel}>\nDecrease Moisture\n</button>\n<button\nclassName={isWatering ? 'StopWateringButton' : 'StartWateringButton'}\nonClick={toggleWatering}\n>\n{isWatering ? 'Stop Watering' : 'Start Watering'}\n</button>\n</div>\n<div className=\"GamificationInfo\">\n<p>Points: {points}</p>\n<p>Level: {level}</p>\n</div>\n<div className=\"GoalsInfo\">\n<h2>Plant Goals</h2>\n<ul>\n{plantGoals.map(plant => (\n<li\nkey={plant.id}\nclassName={plant.achieved ? 'AchievedGoal' : 'NotAchievedGoal'}\n>\nGoal {plant.id}: Maintain moisture between {plant.minMoisture}% and {plant.maxMoisture}% -{' '}\n{plant.achieved ? 'Achieved' : 'Not achieved'}\n</li>\n))}\n</ul>\n</div>\n</div>\n);\n};\n\nexport default Plant;\n\n"]},"metadata":{},"sourceType":"module"}