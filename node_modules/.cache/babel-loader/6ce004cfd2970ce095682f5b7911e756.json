{"ast":null,"code":"var __extends = this && this.t || function () {\n  var extendStatics = function (r, t) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (r, t) {\n      r.__proto__ = t;\n    } || function (r, t) {\n      for (var e in t) if (Object.prototype.hasOwnProperty.call(t, e)) r[e] = t[e];\n    };\n\n    return extendStatics(r, t);\n  };\n\n  return function (r, t) {\n    if (typeof t !== \"function\" && t !== null) throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    extendStatics(r, t);\n\n    function __() {\n      this.constructor = r;\n    }\n\n    r.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __());\n  };\n}();\n\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\n\nvar TreeIterator = function (r) {\n  __extends(TreeIterator, r);\n\n  function TreeIterator(t, e, i) {\n    var n = r.call(this, i) || this;\n    n.o = t;\n    n.h = e;\n\n    if (n.iteratorType === 0) {\n      n.pre = function () {\n        if (this.o === this.h.K) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.L();\n        return this;\n      };\n\n      n.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.m();\n        return this;\n      };\n    } else {\n      n.pre = function () {\n        if (this.o === this.h.N) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.m();\n        return this;\n      };\n\n      n.next = function () {\n        if (this.o === this.h) {\n          throwIteratorAccessError();\n        }\n\n        this.o = this.o.L();\n        return this;\n      };\n    }\n\n    return n;\n  }\n\n  Object.defineProperty(TreeIterator.prototype, \"index\", {\n    get: function () {\n      var r = this.o;\n      var t = this.h.rr;\n\n      if (r === this.h) {\n        if (t) {\n          return t.tr - 1;\n        }\n\n        return 0;\n      }\n\n      var e = 0;\n\n      if (r.K) {\n        e += r.K.tr;\n      }\n\n      while (r !== t) {\n        var i = r.rr;\n\n        if (r === i.N) {\n          e += 1;\n\n          if (i.K) {\n            e += i.K.tr;\n          }\n        }\n\n        r = i;\n      }\n\n      return e;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TreeIterator;\n}(ContainerIterator);\n\nexport default TreeIterator;","map":{"version":3,"sources":["container/TreeContainer/Base/TreeIterator.js","../../src/container/TreeContainer/Base/TreeIterator.ts"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","_this","get","enumerable","configurable","ContainerIterator","throwIteratorAccessError","node","header","iteratorType","_super","_node","_header","pre","_left","_pre","next","_next","_right","TreeIterator","root","_parent","_subTreeSize","index"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nvar TreeIterator = /** @class */ (function (_super) {\n    __extends(TreeIterator, _super);\n    /**\n     * @internal\n     */\n    function TreeIterator(node, header, iteratorType) {\n        var _this = _super.call(this, iteratorType) || this;\n        _this._node = node;\n        _this._header = header;\n        if (_this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            _this.pre = function () {\n                if (this._node === this._header._left) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n        }\n        else {\n            _this.pre = function () {\n                if (this._node === this._header._right) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n            _this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n        }\n        return _this;\n    }\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\n        /**\n         * @description Get the sequential index of the iterator in the tree container.<br/>\n         *              <strong>Note:</strong>\n         *              This function only takes effect when the specified tree container `enableIndex = true`.\n         * @returns The index subscript of the node in the tree.\n         * @example\n         * const st = new OrderedSet([1, 2, 3], true);\n         * console.log(st.begin().next().index);  // 1\n         */\n        get: function () {\n            var _node = this._node;\n            var root = this._header._parent;\n            if (_node === this._header) {\n                if (root) {\n                    return root._subTreeSize - 1;\n                }\n                return 0;\n            }\n            var index = 0;\n            if (_node._left) {\n                index += _node._left._subTreeSize;\n            }\n            while (_node !== root) {\n                var _parent = _node._parent;\n                if (_node === _parent._right) {\n                    index += 1;\n                    if (_parent._left) {\n                        index += _parent._left._subTreeSize;\n                    }\n                }\n                _node = _parent;\n            }\n            return index;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return TreeIterator;\n}(ContainerIterator));\nexport default TreeIterator;\n","import { TreeNode } from './TreeNode';\nimport type { TreeNodeEnableIndex } from './TreeNode';\nimport { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport TreeContainer from '@/container/TreeContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: TreeContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === this._header._left) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this._header._right) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n    }\n  }\n  /**\n   * @description Get the sequential index of the iterator in the tree container.<br/>\n   *              <strong>Note:</strong>\n   *              This function only takes effect when the specified tree container `enableIndex = true`.\n   * @returns The index subscript of the node in the tree.\n   * @example\n   * const st = new OrderedSet([1, 2, 3], true);\n   * console.log(st.begin().next().index);  // 1\n   */\n  get index() {\n    let _node = this._node as TreeNodeEnableIndex<K, V>;\n    const root = this._header._parent as TreeNodeEnableIndex<K, V>;\n    if (_node === this._header) {\n      if (root) {\n        return root._subTreeSize - 1;\n      }\n      return 0;\n    }\n    let index = 0;\n    if (_node._left) {\n      index += (_node._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    while (_node !== root) {\n      const _parent = _node._parent as TreeNodeEnableIndex<K, V>;\n      if (_node === _parent._right) {\n        index += 1;\n        if (_parent._left) {\n          index += (_parent._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n        }\n      }\n      _node = _parent;\n    }\n    return index;\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport default TreeIterator;\n"]},"metadata":{},"sourceType":"module"}