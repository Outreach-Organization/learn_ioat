{"ast":null,"code":"var _jsxFileName = \"/home/nza/PlantQ/src/components/Hook/index.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\nimport mqtt from 'mqtt';\nexport const QosOption = createContext([]); // https://github.com/mqttjs/MQTT.js#qos\n\nconst qosOption = [{\n  label: '0',\n  value: 0\n}, {\n  label: '1',\n  value: 1\n}, {\n  label: '2',\n  value: 2\n}];\n\nconst HookMqtt = () => {\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    /**\n     * if protocol is \"ws\", connectUrl = \"ws://broker.emqx.io:8083/mqtt\"\n     * if protocol is \"wss\", connectUrl = \"wss://broker.emqx.io:8084/mqtt\"\n     *\n     * /mqtt: MQTT-WebSocket uniformly uses /path as the connection path,\n     * which should be specified when connecting, and the path used on EMQX is /mqtt.\n     *\n     * for more details about \"mqtt.connect\" method & options,\n     * please refer to https://github.com/mqttjs/MQTT.js#mqttconnecturl-options\n     */\n\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      // https://github.com/mqttjs/MQTT.js#event-connect\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n        console.log('connection successful');\n      }); // https://github.com/mqttjs/MQTT.js#event-error\n\n      client.on('error', err => {\n        console.error('Connection error: ', err);\n        client.end();\n      }); // https://github.com/mqttjs/MQTT.js#event-reconnect\n\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      }); // https://github.com/mqttjs/MQTT.js#event-message\n\n      client.on('message', (topic, message) => {\n        const payload = {\n          topic,\n          message: message.toString()\n        };\n        setPayload(payload);\n        console.log(`received message: ${message} from topic: ${topic}`);\n      });\n    }\n  }, [client]); // disconnect\n  // https://github.com/mqttjs/MQTT.js#mqttclientendforce-options-callback\n\n  const mqttDisconnect = () => {\n    if (client) {\n      try {\n        client.end(false, () => {\n          setConnectStatus('Connect');\n          console.log('disconnected successfully');\n        });\n      } catch (error) {\n        console.log('disconnect error:', error);\n      }\n    }\n  }; // publish message\n  // https://github.com/mqttjs/MQTT.js#mqttclientpublishtopic-message-options-callback\n\n\n  const mqttPublish = context => {\n    if (client) {\n      // topic, QoS & payload for publishing message\n      const {\n        topic,\n        qos,\n        payload\n      } = context;\n      client.publish(topic, payload, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  };\n\n  const mqttSub = subscription => {\n    if (client) {\n      // topic & QoS for MQTT subscribing\n      const {\n        topic,\n        qos\n      } = subscription; // subscribe topic\n      // https://github.com/mqttjs/MQTT.js#mqttclientsubscribetopictopic-arraytopic-object-options-callback\n\n      client.subscribe(topic, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Subscribe to topics error', error);\n          return;\n        }\n\n        console.log(`Subscribe to topics: ${topic}`);\n        setIsSub(true);\n      });\n    }\n  }; // unsubscribe topic\n  // https://github.com/mqttjs/MQTT.js#mqttclientunsubscribetopictopic-array-options-callback\n\n\n  const mqttUnSub = subscription => {\n    if (client) {\n      const {\n        topic,\n        qos\n      } = subscription;\n      client.unsubscribe(topic, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Unsubscribe error', error);\n          return;\n        }\n\n        console.log(`unsubscribed topic: ${topic}`);\n        setIsSub(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Connection, {\n    connect: mqttConnect,\n    disconnect: mqttDisconnect,\n    connectBtn: connectStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(QosOption.Provider, {\n    value: qosOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Subscriber, {\n    sub: mqttSub,\n    unSub: mqttUnSub,\n    showUnsub: isSubed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Publisher, {\n    publish: mqttPublish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Receiver, {\n    payload: payload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default HookMqtt;","map":{"version":3,"sources":["/home/nza/PlantQ/src/components/Hook/index.js"],"names":["React","createContext","useEffect","useState","Connection","Publisher","Subscriber","Receiver","mqtt","QosOption","qosOption","label","value","HookMqtt","client","setClient","isSubed","setIsSub","payload","setPayload","connectStatus","setConnectStatus","mqttConnect","host","mqttOption","connect","on","console","log","err","error","end","topic","message","toString","mqttDisconnect","mqttPublish","context","qos","publish","mqttSub","subscription","subscribe","mqttUnSub","unsubscribe"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport Connection from './Connection'\nimport Publisher from './Publisher'\nimport Subscriber from './Subscriber'\nimport Receiver from './Receiver'\nimport mqtt from 'mqtt'\n\nexport const QosOption = createContext([])\n// https://github.com/mqttjs/MQTT.js#qos\nconst qosOption = [\n  {\n    label: '0',\n    value: 0,\n  },\n  {\n    label: '1',\n    value: 1,\n  },\n  {\n    label: '2',\n    value: 2,\n  },\n]\n\nconst HookMqtt = () => {\n  const [client, setClient] = useState(null)\n  const [isSubed, setIsSub] = useState(false)\n  const [payload, setPayload] = useState({})\n  const [connectStatus, setConnectStatus] = useState('Connect')\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting')\n    /**\n     * if protocol is \"ws\", connectUrl = \"ws://broker.emqx.io:8083/mqtt\"\n     * if protocol is \"wss\", connectUrl = \"wss://broker.emqx.io:8084/mqtt\"\n     *\n     * /mqtt: MQTT-WebSocket uniformly uses /path as the connection path,\n     * which should be specified when connecting, and the path used on EMQX is /mqtt.\n     *\n     * for more details about \"mqtt.connect\" method & options,\n     * please refer to https://github.com/mqttjs/MQTT.js#mqttconnecturl-options\n     */\n    setClient(mqtt.connect(host, mqttOption))\n  }\n\n  useEffect(() => {\n    if (client) {\n      // https://github.com/mqttjs/MQTT.js#event-connect\n      client.on('connect', () => {\n        setConnectStatus('Connected')\n        console.log('connection successful')\n      })\n\n      // https://github.com/mqttjs/MQTT.js#event-error\n      client.on('error', (err) => {\n        console.error('Connection error: ', err)\n        client.end()\n      })\n\n      // https://github.com/mqttjs/MQTT.js#event-reconnect\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting')\n      })\n\n      // https://github.com/mqttjs/MQTT.js#event-message\n      client.on('message', (topic, message) => {\n        const payload = { topic, message: message.toString() }\n        setPayload(payload)\n        console.log(`received message: ${message} from topic: ${topic}`)\n      })\n    }\n  }, [client])\n\n  // disconnect\n  // https://github.com/mqttjs/MQTT.js#mqttclientendforce-options-callback\n  const mqttDisconnect = () => {\n    if (client) {\n      try {\n        client.end(false, () => {\n          setConnectStatus('Connect')\n          console.log('disconnected successfully')\n        })\n      } catch (error) {\n        console.log('disconnect error:', error)\n      }\n    }\n  }\n\n  // publish message\n  // https://github.com/mqttjs/MQTT.js#mqttclientpublishtopic-message-options-callback\n  const mqttPublish = (context) => {\n    if (client) {\n      // topic, QoS & payload for publishing message\n      const { topic, qos, payload } = context\n      client.publish(topic, payload, { qos }, (error) => {\n        if (error) {\n          console.log('Publish error: ', error)\n        }\n      })\n    }\n  }\n\n  const mqttSub = (subscription) => {\n    if (client) {\n      // topic & QoS for MQTT subscribing\n      const { topic, qos } = subscription\n      // subscribe topic\n      // https://github.com/mqttjs/MQTT.js#mqttclientsubscribetopictopic-arraytopic-object-options-callback\n      client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log('Subscribe to topics error', error)\n          return\n        }\n        console.log(`Subscribe to topics: ${topic}`)\n        setIsSub(true)\n      })\n    }\n  }\n\n  // unsubscribe topic\n  // https://github.com/mqttjs/MQTT.js#mqttclientunsubscribetopictopic-array-options-callback\n  const mqttUnSub = (subscription) => {\n    if (client) {\n      const { topic, qos } = subscription\n      client.unsubscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log('Unsubscribe error', error)\n          return\n        }\n        console.log(`unsubscribed topic: ${topic}`)\n        setIsSub(false)\n      })\n    }\n  }\n\n  return (\n    <>\n      <Connection\n        connect={mqttConnect}\n        disconnect={mqttDisconnect}\n        connectBtn={connectStatus}\n      />\n      <QosOption.Provider value={qosOption}>\n        <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n        <Publisher publish={mqttPublish} />\n      </QosOption.Provider>\n      <Receiver payload={payload} />\n    </>\n  )\n}\n\nexport default HookMqtt\n"]},"metadata":{},"sourceType":"module"}