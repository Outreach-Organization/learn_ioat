{"ast":null,"code":"var _jsxFileName = \"/home/nza/PlantQ/src/components/Hook/Connection.js\";\nimport React from 'react';\nimport { Card, Button, Form, Input, Row, Col, Select } from 'antd';\n/**\n * this demo uses EMQX Public MQTT Broker (https://www.emqx.com/en/mqtt/public-mqtt5-broker), here are the details:\n *\n * Broker host: broker.emqx.io\n * WebSocket port: 8083\n * WebSocket over TLS/SSL port: 8084\n */\n\nconst Connection = ({\n  connect,\n  disconnect,\n  connectBtn\n}) => {\n  const [form] = Form.useForm();\n  const initialConnectionOptions = {\n    // ws or wss\n    protocol: 'ws',\n    host: 'broker.emqx.io',\n    clientId: 'emqx_react_' + Math.random().toString(16).substring(2, 8),\n    // ws -> 8083; wss -> 8084\n    port: 8083,\n\n    /**\n     * By default, EMQX allows clients to connect without authentication.\n     * https://docs.emqx.com/en/enterprise/v4.4/advanced/auth.html#anonymous-login\n     */\n    username: 'emqx_test',\n    password: 'emqx_test'\n  };\n\n  const handleProtocolChange = value => {\n    form.setFieldsValue({\n      port: value === 'wss' ? 8084 : 8083\n    });\n  };\n\n  const onFinish = values => {\n    const {\n      protocol,\n      host,\n      clientId,\n      port,\n      username,\n      password\n    } = values;\n    const url = `${protocol}://${host}:${port}/mqtt`;\n    const options = {\n      clientId,\n      username,\n      password,\n      clean: true,\n      reconnectPeriod: 1000,\n      // ms\n      connectTimeout: 30 * 1000 // ms\n\n    };\n    connect(url, options);\n  };\n\n  const handleConnect = () => {\n    form.submit();\n  };\n\n  const handleDisconnect = () => {\n    disconnect();\n  };\n\n  const ConnectionForm = /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    name: \"basic\",\n    form: form,\n    initialValues: initialConnectionOptions,\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Protocol\",\n    name: \"protocol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    onChange: handleProtocolChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select.Option, {\n    value: \"ws\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, \"ws\"), /*#__PURE__*/React.createElement(Select.Option, {\n    value: \"wss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \"wss\")))), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Host\",\n    name: \"host\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Port\",\n    name: \"port\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Client ID\",\n    name: \"clientId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Username\",\n    name: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Password\",\n    name: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  })))));\n  return /*#__PURE__*/React.createElement(Card, {\n    title: \"Connection\",\n    actions: [/*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: handleConnect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, connectBtn), /*#__PURE__*/React.createElement(Button, {\n      danger: true,\n      onClick: handleDisconnect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"Disconnect\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, ConnectionForm);\n};\n\nexport default Connection;","map":{"version":3,"sources":["/home/nza/PlantQ/src/components/Hook/Connection.js"],"names":["React","Card","Button","Form","Input","Row","Col","Select","Connection","connect","disconnect","connectBtn","form","useForm","initialConnectionOptions","protocol","host","clientId","Math","random","toString","substring","port","username","password","handleProtocolChange","value","setFieldsValue","onFinish","values","url","options","clean","reconnectPeriod","connectTimeout","handleConnect","submit","handleDisconnect","ConnectionForm"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, Button, Form, Input, Row, Col, Select } from 'antd'\n\n/**\n * this demo uses EMQX Public MQTT Broker (https://www.emqx.com/en/mqtt/public-mqtt5-broker), here are the details:\n *\n * Broker host: broker.emqx.io\n * WebSocket port: 8083\n * WebSocket over TLS/SSL port: 8084\n */\n\nconst Connection = ({ connect, disconnect, connectBtn }) => {\n  const [form] = Form.useForm()\n  const initialConnectionOptions = {\n    // ws or wss\n    protocol: 'ws',\n    host: 'broker.emqx.io',\n    clientId: 'emqx_react_' + Math.random().toString(16).substring(2, 8),\n    // ws -> 8083; wss -> 8084\n    port: 8083,\n    /**\n     * By default, EMQX allows clients to connect without authentication.\n     * https://docs.emqx.com/en/enterprise/v4.4/advanced/auth.html#anonymous-login\n     */\n    username: 'emqx_test',\n    password: 'emqx_test',\n  }\n\n  const handleProtocolChange = (value) => {\n    form.setFieldsValue({\n      port: value === 'wss' ? 8084 : 8083,\n    })\n  }\n\n  const onFinish = (values) => {\n    const { protocol, host, clientId, port, username, password } = values\n    const url = `${protocol}://${host}:${port}/mqtt`\n    const options = {\n      clientId,\n      username,\n      password,\n      clean: true,\n      reconnectPeriod: 1000, // ms\n      connectTimeout: 30 * 1000, // ms\n    }\n    connect(url, options)\n  }\n\n  const handleConnect = () => {\n    form.submit()\n  }\n\n  const handleDisconnect = () => {\n    disconnect()\n  }\n\n  const ConnectionForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={initialConnectionOptions}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={8}>\n          <Form.Item label=\"Protocol\" name=\"protocol\">\n            <Select onChange={handleProtocolChange}>\n              <Select.Option value=\"ws\">ws</Select.Option>\n              <Select.Option value=\"wss\">wss</Select.Option>\n            </Select>\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Host\" name=\"host\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Port\" name=\"port\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Client ID\" name=\"clientId\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Username\" name=\"username\">\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item label=\"Password\" name=\"password\">\n            <Input />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Connection\"\n      actions={[\n        <Button type=\"primary\" onClick={handleConnect}>\n          {connectBtn}\n        </Button>,\n        <Button danger onClick={handleDisconnect}>\n          Disconnect\n        </Button>,\n      ]}\n    >\n      {ConnectionForm}\n    </Card>\n  )\n}\n\nexport default Connection\n"]},"metadata":{},"sourceType":"module"}